<?php

/**
 * @file
 * Main functions for the module
 */

/**
 * Implements of hook_permission().
 */
function twitter_cards_permission() {
  return array(
    'administer twitter cards' => array(
      'title' => t('Administer Twitter cards'),
      'description' => t('Set what content types should have Twitter cards meta tags.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function twitter_cards_menu() {
  $items['admin/config/services/twitter-cards'] = array(
    'title' => 'Twitter cards',
    'description' => 'Choose what content should allow Twitter cards to be shown for.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('twitter_cards_settings'),
    'access arguments' => array('administer twitter cards'),
  );
  return $items;
}


/**
 * Modules settings form.
 */
function twitter_cards_settings() {

  $form_item_preffix = 'twitter_cards_';

  $form = array();

  $form['sitewide'] = array(
    '#type' => 'fieldset',
    '#title' => t('Site wide settings'),
  );

  $form['sitewide'][$form_item_preffix . 'sitewide'] = array(
    '#title' => t('Site Twitter username'),
    '#description' => t("This is used as a fallback when the node author doesn't have a Twitter account."),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => variable_get($form_item_preffix . 'sitewide', 'drupal'),
  );

  // Find all node content types.
  $node_types = node_type_get_types();

  // Loop through each content type and give it options.
  foreach ($node_types as $key => $value) {

    // Store image fields in an options array.
    $image_fields = array();
    $image_fields['logo'] = 'Use default generic image';

    // Do the same for text fields.
    $text_fields = array();
    $image_fields[variable_get('site_name')] = 'Use the site name (' . variable_get('site_name') . ')';

    // Get fields of each content type and loop through to find image fields.
    $fields_info = field_info_instances('node', $key);
    foreach ($fields_info as $field_name => $data) {
      $field_info = field_info_field($field_name);

      switch ($field_info['type']) {
        case 'image':
          $image_fields[$field_info['field_name']] = $data['label'];
          break;

        case 'text':
        case 'text_long':
        case 'text_with_summary':
          $text_fields[$field_info['field_name']] = $data['label'];
          break;
      }
    }

    // Simple fieldset to wrap the content type options.
    $form[$key] = array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#title' => t(check_plain($value->name)),
    );

    $form[$key][$form_item_preffix . $key . '_card_type'] = array(
      '#title' => t('Display option'),
      '#type' => 'select',
      '#options' => array(
        'summary' => t('Summary'),
        'photo' => t('Photo'),
      ),
      '#default_value' => variable_get($form_item_preffix . $key . '_card_type', 'summary'),
    );

    $form[$key][$form_item_preffix . $key . '_image_field'] = array(
      '#title' => t('Select image field'),
      '#description' => t('Which image field on this content type should be used as the preview image on Twitter. If there is no field or one is not selected then the site logo will be used.'),
      '#type' => 'select',
      '#options' => $image_fields,
      '#default_value' => variable_get($form_item_preffix . $key . '_image_field', ''),
    );

    $form[$key][$form_item_preffix . $key . '_text_field'] = array(
      '#title' => t('Select text field'),
      '#description' => t('Which text field on this content type should be used as the summary text on Twitter. If there is no field or one is not selected then the site name will be used.'),
      '#type' => 'select',
      '#options' => $text_fields,
      '#default_value' => variable_get($form_item_preffix . $key . '_text_field', variable_get('site_name')),
    );

    /*
     * If users set their personal twitter accounts in their profile
     * then allow them to use those.
     */
    if (module_exists('twitter')) {
      $form[$key][$form_item_preffix . $key . '_user_handle'] = array(
        '#title' => t('Show authors Twitter username'),
        '#description' => t('If checked and the user has at least one Twitter account associeted with thier profile then checking this will use the first one as the author of this post.'),
        '#type' => 'checkbox',
        '#options' => array(
          0 => t('No'),
          1 => t('Yes'),
        ),
        '#default_value' => variable_get($form_item_preffix . $key . '_user_handle', ''),
      );
    }

  }

  return system_settings_form($form);
}

/**
 * Implements hook_preprocess_node().
 */
function twitter_cards_preprocess_node(&$variables) {

  // Example: twitter:card.
  $element = array(
    '#tag' => 'meta',
    '#attributes' => array(
      'name' => 'twitter:card',
      'content' => variable_get('twitter_cards_' . $variables['type'] . '_card_type', 'summary'),
    ),
  );
  drupal_add_html_head($element, 'twitter_cards_card');

  // Example: twitter:url.
  $element = array(
    '#tag' => 'meta',
    '#attributes' => array(
      'name' => 'twitter:url',
      'content' => url('node/' . $variables['nid'], array('absolute' => TRUE)),
    ),
  );
  drupal_add_html_head($element, 'twitter_cards_url');

  // Example: twitter:title.
  $element = array(
    '#tag' => 'meta',
    '#attributes' => array(
      'name' => 'twitter:title',
      'content' => $variables['title'],
    ),
  );
  drupal_add_html_head($element, 'twitter_cards_title');

  // Example: twitter:description.
  // Get the first value of the chosen text field.
  variable_get('twitter_cards_' . $variables['type'] . '_text_field', variable_get('site_name'));
  $card_desc_field = variable_get('twitter_cards_' . $variables['type'] . '_text_field', '');

  // Check if a field was selected otherwise use the site_name var.
  if ($card_desc_field != '' && isset($variables[$card_desc_field])) {
    // Some fields seem to have a different structure around the language.
    $card_description = $variables[$card_desc_field][$variables['language']][0]['safe_value'];
    // So we provide a fallback option.
    if ($card_description == '') {
      $card_description = $variables[$card_desc_field][0]['safe_value'];
    }
  }
  else {
    $card_description = variable_get('site_name', '');
  }

  $element = array(
    '#tag' => 'meta',
    '#attributes' => array(
      'name' => 'twitter:description',
      'content' => trim(text_summary(strip_tags($card_description), NULL, 200)),
    ),
  );
  drupal_add_html_head($element, 'twitter_cards_description');

  // Content type image settings.
  $image_field = variable_get('twitter_cards_' . $variables['type'] . '_image_field', 'logo');

  $image_path_default = file_create_url(drupal_get_path('module', 'twitter_cards') . '/logo.png');

  if ($image_field == 'logo') {
    // Use the site logo if set.
    $image_path = $image_path_default;
  }
  else if (isset($variables[$image_field])) {
    // Use the entity field.
    foreach ($variables[$image_field] as $key => $value) {

      $image_field_uri = $value['uri'];
      if ($image_field_uri != '') {
        // If a photo card then we need to specify the x/y of the image.
        // We also want to return the original for a photo card.
        // As well as a thumbnail preview if a summary.
        if (variable_get('twitter_cards_' . $variables['type'] . '_card_type', 'summary') == 'photo') {
          $image_path = file_create_url($value['uri']);
        }
        else {

          $image_path = image_style_url('twitter_cards_preview', file_uri_target($value['uri']));

          // twitter:image:width.
          $element = array(
            '#tag' => 'meta',
            '#attributes' => array(
              'name' => 'twitter:image:width',
              'content' => 120,
            ),
          );
          drupal_add_html_head($element, 'twitter_cards_image_width');

          // twitter:image:height.
          $element = array(
            '#tag' => 'meta',
            '#attributes' => array(
              'name' => 'twitter:image:height',
              'content' => 120,
            ),
          );
          drupal_add_html_head($element, 'twitter_cards_image_height');

        }
      }
      else {
        $image_path = $image_path_default;
      }
    }
  }
  else {
    $image_path = $image_path_default;
  }

  // Extra check to make sure we have an image.
  if (!isset($image_path)) {
    $image_path = $image_path_default;
  }

  // twitter:image.
  $element = array(
    '#tag' => 'meta',
    '#attributes' => array(
      'name' => 'twitter:image',
      'content' => $image_path,
    ),
  );
  drupal_add_html_head($element, 'twitter_cards_image');

  // Use the sitewide Twitter account.
  // twitter:site.
  $element = array(
    '#tag' => 'meta',
    '#attributes' => array(
      'name' => 'twitter:site',
      'content' => '@' . str_replace('@', '', variable_get('twitter_cards_sitewide', 'drupal')),
    ),
  );
  drupal_add_html_head($element, 'twitter_cards_site');

  $show_author = variable_get('twitter_cards_' . $variables['type'] . '_user_handle', 0);

  if (module_exists('twitter') && $show_author === 1) {
    $author_twitter_handle = twitter_twitter_accounts(user_load($variables['uid']));
    if (isset($author_twitter_handle[0]->screen_name)) {
      // The user has a twitter account setup with drupal.org/project/twitter.
      // twitter:creator.
      $element = array(
        '#tag' => 'meta',
        '#attributes' => array(
          'name' => 'twitter:creator',
          'content' => '@' . str_replace('@', '', $author_twitter_handle[0]->screen_name),
        ),
      );
      drupal_add_html_head($element, 'twitter_cards_creator');
    }
  }

}


/**
 * Implements hook_image_default_styles().
 */
function twitter_cards_image_default_styles() {
  $styles = array();

  $styles['twitter_cards_preview'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => 120,
          'height' => 120,
          'upscale' => 1,
        ),
        'weight' => 0,
      ),
    ),
  );

  return $styles;
}
